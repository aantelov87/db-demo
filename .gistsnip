{
    "Description": "",
    "Snippets": {
        "00_yolo\\main#list.go": {
            "GistID": "a2a3c3b84b15326e61b5696995d24891",
            "GistURL": "https://gist.github.com/a2a3c3b84b15326e61b5696995d24891",
            "Line": 17,
            "File": "00_yolo/main.go",
            "Path": "00_yolo/main#list.go",
            "Name": "list",
            "Content": "db, err := sql.Open(\"postgres\", \"user=dbdemo password=dbdemo dbname=dbdemo sslmode=disable\")\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer db.Close()\n\n_, err = db.Exec(`\n\tCREATE TABLE IF NOT EXISTS Comments (\n\t\t\"User\"    TEXT,\n\t\t\"Comment\" TEXT\n\t)\n`)\nif err != nil {\n\tlog.Fatal(err)\n}\n\nhttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\tif r.Method != http.MethodGet {\n\t\tShowErrorPage(w, http.StatusMethodNotAllowed, \"Invalid method\", nil)\n\t\treturn\n\t}\n\n\trows, err := db.Query(`SELECT \"User\", \"Comment\" FROM Comments`)\n\tif err != nil {\n\t\tShowErrorPage(w, http.StatusInternalServerError, \"Unable to access DB\", err)\n\t\treturn\n\t}\n\tdefer rows.Close()\n\n\tcomments := []Comment{}\n\tfor rows.Next() {\n\t\tvar comment Comment\n\t\terr := rows.Scan(\u0026comment.User, \u0026comment.Text)\n\t\tif err != nil {\n\t\t\tShowErrorPage(w, http.StatusInternalServerError, \"Unable to load data\", err)\n\t\t\treturn\n\t\t}\n\t\tcomments = append(comments, comment)\n\t}\n\n\tif err := rows.Err(); err != nil {\n\t\tShowErrorPage(w, http.StatusInternalServerError, \"Failed to load data from DB\", err)\n\t\treturn\n\t}\n\n\tShowCommentsPage(w, comments)\n})"
        },
        "01_funcs\\main#list.go": {
            "GistID": "ae9d8bc2d2e6a21e1b5a249b9a21e710",
            "GistURL": "https://gist.github.com/ae9d8bc2d2e6a21e1b5a249b9a21e710",
            "Line": 31,
            "File": "01_funcs/main.go",
            "Path": "01_funcs/main#list.go",
            "Name": "list",
            "Content": "func listComments(db *sql.DB) ([]Comment, error) {\n\trows, err := db.Query(`SELECT \"User\", \"Comment\" FROM Comments`)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer rows.Close()\n\n\tcomments := []Comment{}\n\tfor rows.Next() {\n\t\tvar comment Comment\n\t\terr := rows.Scan(\u0026comment.User, \u0026comment.Text)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tcomments = append(comments, comment)\n\t}\n\n\tif err := rows.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn comments, nil\n}\n\nfunc main() {\n\tdb, err := sql.Open(\"postgres\", \"user=dbdemo password=dbdemo dbname=dbdemo sslmode=disable\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer db.Close()\n\n\tif err := initDatabse(db); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method != http.MethodGet {\n\t\t\tShowErrorPage(w, http.StatusMethodNotAllowed, \"Invalid method\", nil)\n\t\t\treturn\n\t\t}\n\n\t\tcomments, err := listComments(db)\n\t\tif err != nil {\n\t\t\tShowErrorPage(w, http.StatusInternalServerError, \"Unable to access DB\", err)\n\t\t\treturn\n\t\t}\n\n\t\tShowCommentsPage(w, comments)\n\t})\n\n}"
        },
        "02_repo\\comments#comments.go": {
            "GistID": "76fab89b4e1d8a96a6c64939f9b42b9b",
            "GistURL": "https://gist.github.com/76fab89b4e1d8a96a6c64939f9b42b9b",
            "Line": 9,
            "File": "02_repo/comments.go",
            "Path": "02_repo/comments#comments.go",
            "Name": "comments",
            "Content": "type Comments struct {\n\tdb *sql.DB\n}\n\nfunc (repo *Comments) List() ([]Comment, error) {\n\trows, err := repo.db.Query(`SELECT \"User\", \"Comment\" FROM Comments`)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer rows.Close()\n\n\tcomments := []Comment{}\n\tfor rows.Next() {\n\t\tvar comment Comment\n\t\terr := rows.Scan(\u0026comment.User, \u0026comment.Text)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tcomments = append(comments, comment)\n\t}\n\n\tif err := rows.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn comments, nil\n}"
        },
        "02_repo\\main#main.go": {
            "GistID": "1dfa6c2de42e9039eb09d2782f2fe687",
            "GistURL": "https://gist.github.com/1dfa6c2de42e9039eb09d2782f2fe687",
            "Line": 14,
            "File": "02_repo/main.go",
            "Path": "02_repo/main#main.go",
            "Name": "main",
            "Content": "commentsRepo, err := NewComments(\"user=dbdemo password=dbdemo dbname=dbdemo sslmode=disable\")\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer commentsRepo.Close()\n\nhttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\tif r.Method != http.MethodGet {\n\t\tShowErrorPage(w, http.StatusMethodNotAllowed, \"Invalid method\", nil)\n\t\treturn\n\t}\n\n\tcomments, err := commentsRepo.List()\n\tif err != nil {\n\t\tShowErrorPage(w, http.StatusInternalServerError, \"Unable to access DB\", err)\n\t\treturn\n\t}\n\n\tShowCommentsPage(w, comments)\n})"
        },
        "03_server\\main#main.go": {
            "GistID": "b5fa07c89c742d469de9eb0d98260687",
            "GistURL": "https://gist.github.com/b5fa07c89c742d469de9eb0d98260687",
            "Line": 14,
            "File": "03_server/main.go",
            "Path": "03_server/main#main.go",
            "Name": "main",
            "Content": "comments, err := NewComments(\"user=dbdemo password=dbdemo dbname=dbdemo sslmode=disable\")\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer comments.Close()\n\nserver := NewServer(comments)\n\nlog.Println(\"Started listening on :8080\")\nif err := http.ListenAndServe(\":8080\", server); err != nil {\n\tlog.Fatal(err)\n}"
        },
        "03_server\\server#server.go": {
            "GistID": "1e69031db36337ea717159c362430cf1",
            "GistURL": "https://gist.github.com/1e69031db36337ea717159c362430cf1",
            "Line": 5,
            "File": "03_server/server.go",
            "Path": "03_server/server#server.go",
            "Name": "server",
            "Content": "type Server struct {\n\tcomments *Comments\n}\n\nfunc (server *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tswitch r.URL.Path {\n\tcase \"/\":\n\t\tserver.HandleList(w, r)\n\tcase \"/comment\":\n\t\tserver.HandleAddComment(w, r)\n\tdefault:\n\t\tShowErrorPage(w, http.StatusNotFound, \"Page not found\", nil)\n\t}\n}\n\nfunc (server *Server) HandleList(w http.ResponseWriter, r *http.Request) {\n\tif r.Method != http.MethodGet {\n\t\tShowErrorPage(w, http.StatusMethodNotAllowed, \"Invalid method\", nil)\n\t\treturn\n\t}\n\n\tcomments, err := server.comments.List()\n\tif err != nil {\n\t\tShowErrorPage(w, http.StatusInternalServerError, \"Unable to access DB\", err)\n\t\treturn\n\t}\n\n\tShowCommentsPage(w, comments)\n}"
        },
        "04_interface\\directory#directory.txt": {
            "GistID": "51da4031aedef94697e9f01288c6e976",
            "GistURL": "https://gist.github.com/51da4031aedef94697e9f01288c6e976",
            "Line": 1,
            "File": "04_interface/directory.txt",
            "Path": "04_interface/directory#directory.txt",
            "Name": "directory",
            "Content": "├── main.go\n├── pgdb\n│   └── comments.go\n└── site\n    ├── comment.go\n    ├── present.go\n    └── server.go"
        },
        "04_interface\\site\\server#interface.go": {
            "GistID": "a1ca07e5cf95230d3bae9e776d986a0a",
            "GistURL": "https://gist.github.com/a1ca07e5cf95230d3bae9e776d986a0a",
            "Line": 5,
            "File": "04_interface/site/server.go",
            "Path": "04_interface/site/server#interface.go",
            "Name": "interface",
            "Content": "type Comments interface {\n\tAdd(user, comment string) error\n\tList() ([]Comment, error)\n}\n\ntype Server struct {\n\tcomments Comments\n}\n\nfunc NewServer(comments Comments) *Server {\n\treturn \u0026Server{\n\t\tcomments: comments,\n\t}\n}"
        },
        "05_scope\\site\\server#db.go": {
            "GistID": "57599ecb3252835152efef0ed718b041",
            "GistURL": "https://gist.github.com/57599ecb3252835152efef0ed718b041",
            "Line": 5,
            "File": "05_scope/site/server.go",
            "Path": "05_scope/site/server#db.go",
            "Name": "db",
            "Content": "type DB interface {\n\tComments() Comments\n}\n\ntype Comments interface {\n\tAdd(user, comment string) error\n\tList() ([]Comment, error)\n}\n\ntype Server struct {\n\tdb DB\n}\n\nfunc (server *Server) HandleList(w http.ResponseWriter, r *http.Request) {\n\tif r.Method != http.MethodGet {\n\t\tShowErrorPage(w, http.StatusMethodNotAllowed, \"Invalid method\", nil)\n\t\treturn\n\t}\n\n\tcomments, err := server.db.Comments().List()\n\tif err != nil {\n\t\tShowErrorPage(w, http.StatusInternalServerError, \"Unable to access DB\", err)\n\t\treturn\n\t}\n\n\tShowCommentsPage(w, comments)\n}"
        },
        "xx_misc\\access-control#accesscontrol.go": {
            "GistID": "753ed97de5ee8c7c8c3ffd510e90e6d9",
            "GistURL": "https://gist.github.com/753ed97de5ee8c7c8c3ffd510e90e6d9",
            "Line": 5,
            "File": "xx_misc/access-control.go",
            "Path": "xx_misc/access-control#accesscontrol.go",
            "Name": "accesscontrol",
            "Content": "type DB interface {\n\tAuth() Auth\n\tUsers(id user.ID) Users\n\tComments(id user.ID) Comments\n}\n\ntype Auth interface { ... }\ntype Users interface { ... }\ntype Comments interface { ... }"
        },
        "xx_misc\\access-control#accessimpl.go": {
            "GistID": "0c75d747bac9a2a3ba256b2a22412bbe",
            "GistURL": "https://gist.github.com/0c75d747bac9a2a3ba256b2a22412bbe",
            "Line": 17,
            "File": "xx_misc/access-control.go",
            "Path": "xx_misc/access-control#accessimpl.go",
            "Name": "accessimpl",
            "Content": "type DB struct {\n\t*sql.DB\n}\n\nfunc (db *DB) Comments(id user.ID) site.Comments { return \u0026Comments{db, id} }\n\ntype Comments struct {\n\tdb   *DB\n\tuser user.ID\n}\n\nfunc (repo *Comments) Add(user, comment string) error {\n\t// check whether repo.user has rights to add a comment\n\t// add comment\n}"
        },
        "xx_misc\\access-control#admin.go": {
            "GistID": "aa84476339825f70bb03f79f64662858",
            "GistURL": "https://gist.github.com/aa84476339825f70bb03f79f64662858",
            "Line": 35,
            "File": "xx_misc/access-control.go",
            "Path": "xx_misc/access-control#admin.go",
            "Name": "admin",
            "Content": "type DB interface {\n\tAdmin() AdminDB\n\tComments() Comments\n}\n\ntype AdminDB interface { \n\tDB\n\t// only for admins\n\tRunMigrations() error\n\tDropDatabase() error\n}"
        }
    }
}
